install.packages("~/Desktop/SDSFoundations_1.1.tgz", repos = NULL, type = .Platform$pkgType)
print('hello')
17+3
1*2*3*4*5*6*7*8*9*10
history()
q()
1:50
c(1, 2, 3, 4) + c(10, 20, 30, 40)
c(1, 2, 3, 4) + 1
# here is an exame of a comment at the beginning of a line
1 + 2 + # and a comment in the middle 3
3
exp(1)
cos(pi)
log2(1)
log(1)
log(x=64, base = 4)
log(64, 4)
b ,) c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
b <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
b
b[:6]
b[1:6]
b[c(1, 3, 6, 11)]
b %% 3
b[ b %% 3]
b[ b %% 3 == 0]
one <- 1
two <- 2
one
two
one = 2
one
one = two
one
a ,_ array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), dim=c(3, 4))
a <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), dim=c(3, 4))
a
a[2, 2]
m <- matrix(data = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow=3, ncol=4)
m
w = <- array(c=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), dim=c(3, 3, 2))
w <- array(c=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), dim=c(3, 3, 2))
w <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), dim=c(3, 3, 2))
w
w[1, 1, 2]
e <- list(thing='hat', sizes='8.25')
e
e$hat
e$sizes
e$thing
e[1]
g <-list(e)
g
g[1]
g[1, 1]
g[[1]]
g[[[1]]]
g[[1]]
g
g[[2]]
g[[1]]
g[[1]]$sizes
g[[1]]$thing
teams <- c('PHI', 'NYM', 'FLA', 'ATL', 'WSN')
w <- c(92, 89, 94, 72, 59)
l <- c(70, 73, 77, 90, 102)
nleast <- data.frame(teams, w, l)
nleast
nleast $ w
nleast[nleast$teams == 'FLA']
nleast$1[nleast$teams == 'FLA']
nelast
nleast
nleast$1[nleast$teams == 'FLA']
nleast[nleast$teams == 'FLA']
nleast[nleast$teams == 'FLA']$1
nleast$1
nleast$teams == 'FLA'
nleast$l[nleast$teams == 'FLA']
class(nleast)
quit
quit()
X = seq(0,1,0.001)
Y_true = sin(2*pi*X^3)^3
Y = Y_true + 0.1*rnorm(length(X))
k = seq(0,1,length.out = 8)
k = k[2:7]
print(k)
k = seq(0,1,length.out = 8)
print(k)
k = k[2:7]
print(k)
h1 = rep(1,length(X))
h2 = X
h3 = X^2
h4 = X^3
h5 = (X-k[1])^3
print(h1)
print(h2)
Y_true = sin(2*pi*X^3)^3
print(Y_true)
Y = Y_true + 0.1*rnorm(length(X))
print(Y)
library(splines)
library(rmarkdown)
h5[h5 <= 0] = 0
print(h5[h5 <= 0])
print(h5)
h5 = (X-k[1])^3
h5[h5 <= 0] = 0
print(h5)
h6 = (X-k[2])^3
h6[h6 <= 0] = 0
h7 = (X-k[3])^3
h7[h7 <= 0] = 0
h8 = (X-k[4])^3
h8[h8 <= 0] = 0
h9 = (X-k[5])^3
h9[h9 <= 0] = 0
h10 = (X-k[6])^3
h10[h10 <= 0] = 0
H = cbind(h1, h2, h3, h4, h5, h6, h7, h8, h9, h10)
print(H.shape)
H.dim
dim(H)
B=solve(t(H)%*%H)%*%t(H)%*%Y
plot(X,Y)
lines(X,H%*%B,col = "red",lwd = 3)
lines(X,Y_true,col = "blue", lwd = 3)
dim(t(H))
x = seq(1,100,length.out = 100)
print(x)
par(mfrow = c(4,1))
print(mfrow)
par(mfrow = c(4,1))
print(par(mfrow = c(4,1)))
1:4
for (sd in 1:4)
print(sd)
seq(1, 100, length.out=10)
seq(1, 100, length.out=10)
seq(1, 100, length.out=10)
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
image(c(1:12), x, t(B[,1:12]))
x = seq(1,100,length.out = 100)
print(x)
par(mfrow = c(4,1))
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
image(c(1:12), x, t(B[,1:12]))
image(c(1:12), x, t(B[, 1:11]))
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
image(c(1:12), x, t(B[, 1:11]))
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
image(c(1:12), x, t(B[, 1:12]))
n = 100
x = seq(0,1,length.out = n)
y = 2.5*x-sin(10*x)-exp(-10*x)
sigma = 0.3
ynoise = y + rnorm(n)*sigma
plot(x, y)
knots = seq(0,1,length.out = 10)
B = bs(x, knots = knots, degree = 2,intercept = FALSE)[,1:11]
print(B[1:10, ])
rnorm(n)
yhat = B %*% solve(t(B) %*% B) %*% t(B) %*% ynoise
sigma2 = (1/(n-11)) * t(ynoise-yhat) %*% (ynoise-yhat)
yn = yhat - 3 * sqrt(diag(as.numeric(sigma2) * B %*% solve(t(B) %*% B) %*% t(B)))
yp = yhat + 3 * sqrt(diag(as.numeric(sigma2) * B %*% solve(t(B) %*% B) %*% t(B)))
plot(x,ynoise,col = "red")
lines(x,yn,col = "blue")
lines(x,yp,col = "blue")
lines(x,yhat,col = "black")
load("meat.rdata")
# train and test data sets
s = sample.int(214,20)
s
s.max
max(s)
min(s)
meat[-s]
load(meat.rdate)
load(meat.rdata)
meat <- load("meat.rdata")
# train and test data sets
s = sample.int(214,20)
train = meat[-s,]
test = meat[s,]
### Fat content prediction ###
load("meat.rdata")
# train and test data sets
s = sample.int(214,20)
train = meat[-s,]
test = meat[s,]
linear1 = lm(X101~.,train)
pred1 = predict(linear1,test[,1:100])
rmse1 = sum((test[,101]-pred1)^2)/20
meat = load("meat.rdata")
meat = load("./meat.rdata")
pwd
cwd
pwd()
cwd()
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
x = seq(1,100,length.out = 100)
print(x)
par(mfrow = c(4,1))
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
image(c(1:12), x, t(B[, 1:12]))
x = seq(1,100,length.out = 100)
print(x)
par(mfrow = c(4,1))
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
image(c(1:12), x, t(B[, 1:11]))
x = seq(1,100,length.out = 100)
print(x)
par(mfrow = c(4,1))
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
image(c(1:12), x, t(B[, 1:12]))
x = seq(1,100,length.out = 100)
print(x)
par(mfrow = c(4,1))
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
image(c(1:12), x, t(B[, 1:11]))
x = seq(1,100,length.out = 100)
print(x)
par(mfrow = c(4,1))
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
dev.off()
image(c(1:11), x, t(B[, 1:11]))
knots = seq(0,1,length.out = 10)
B = bs(x, knots = knots, degree = 2,intercept = FALSE)[,1:11]
for(sd in 1:4)
{
knots = seq(1, 100,length.out = 10);
B = bs(x, knots = knots, degree = sd,intercept = FALSE)
matplot(x, B, type = "l")
}
str(B)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(KernSmooth)
install.packages('fda')
lines(X, yhat_7, col="red")
## ----------- ##  PLOT THE RESULTS  ## ----------- ##
plot(seq(6, 15, length.out = 10), mses_per_knot_test)
# import data
energy <- read.csv('./P04.csv', header = FALSE)
library(splines)
# Define X & y
X = energy$V1 - 1950
y = energy$V2
# Helper functions
create_knots <- function (num_o_knots, X_data){
k = seq(min(X_data), max(X_data), length.out=num_o_knots+2)
k = k[2:(length(k) - 1)]
return (k)
}
create_cubic_basis_fn_matrix <- function (knots, X_data){
h1 = rep(1, length(X_data))
h2 = X_data
h3 = X_data^2
h4 = X_data^3
bases = cbind(h1, h2, h3, h4)
for (k in knots) {
h <- (X_data - k)^3; h[h<=0] =0
bases <- cbind(bases, h)
}
return (bases)
}
calculate_beta_hat <- function(bases_fn_matrix, y_label){
beta_hat <- solve(t(bases_fn_matrix) %*% bases_fn_matrix) %*% (t(bases_fn_matrix) %*% y_label)
return(beta_hat)
}
calculate_y_hat2 <- function(beta_hat, bases_fn_matrix){
y_hat <- bases_fn_matrix %*% beta_hat
return (y_hat)
}
calc_sq_error <- function(y_pred, y_actual){
sq_err <- (y_pred - y_actual)^2
return (sq_err)
}
## ----------- ##  TRY DIFFERENT NUMBER OF KNOTS 6 THROUGH 15  ## ----------- ##
mses_per_knot_test = c()
for (k in 6:15){
knots = create_knots(k, X_data = (energy$V1 - 1950))
se_per_loocv_test = rep(0, length(energy$V1))
y_hats_at_k = rep(0, length(energy$V1))
for (i in 1:(length(energy$V1))){
# Leave one out train-test-splitting
X_train = energy[-i, 1] - 1950
y_train = energy[-i, 2]
X_test = energy[i, 1] - 1950
y_test = energy[i, 2]
# Train
H_train = create_cubic_basis_fn_matrix(knots = knots, X_data = X_train)
beta_train = calculate_beta_hat(H_train, y_train)
# Test
H_test = create_cubic_basis_fn_matrix(knots = knots, X_data = X_test)
y_hat_test = calculate_y_hat2(beta_train, H_test)                     # Use beta_train coeffs
se_test = calc_sq_error(y_hat_test, y_test)
se_per_loocv_test[i] = se_test
}
mses_per_knot_test = rbind(mses_per_knot_test, mean(se_per_loocv_test))
}
## ----------- ##  PLOT THE RESULTS  ## ----------- ##
plot(seq(6, 15, length.out = 10), mses_per_knot_test)
lines(seq(6, 15, length.out = 10), mses_per_knot_test)
## ----------- ##  OPTIMAL NUMBER OF KNOTS = 7  ## ----------- ##
knots_7 = create_knots(num_o_knots = 7, X_data = (energy$V1 - 1950))
H_7 = create_cubic_basis_fn_matrix(knots = knots_7, X_data = (energy$V1 - 1950))
beta_7 = calculate_beta_hat(bases_fn_matrix = H_7, y_label = energy$V2)
yhat_7 = calculate_y_hat2(beta_hat = beta_7, bases_fn_matrix = H_7)
## ----------- ##  PLOT NUMBER OF KNOTS = 7 AGAINST THE DATA  ## ----------- ##
plot(X, y, col = 'blue', type = 'p')
lines(X, yhat_7, col="red")
yhat_7 = calculate_y_hat2(beta_hat = beta_7, bases_fn_matrix = H_7)
if(!require(R2OpenBUGS)) install.packages("R2OpenBUGS")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
pwd
ls
plot(cars)
setwd("~/Desktop/Repos/python-for-R-users/notebooks")
library(retriculate)
install.packages('retriculate')
install.packages('reticulate')
library(reticulate)
library(reticulate)
#### Loading Packages
```{python3}
library(reticulate)
use_python('/Users/sylviatran/anaconda3/bin/python')
library(reticulate)
use_python('/Users/sylviatran/anaconda3/bin/python')
library(reticulate)
use_python('/Users/sylviatran/anaconda3/bin/python')
library(reticulate)
use_python('/Users/sylviatran/anaconda3/bin/python')
library(reticulate)
use_python('/Users/sylviatran/anaconda3/bin/python')
library(reticulate)
use_python('/Users/sylviatran/anaconda3/bin/python')
library(reticulate)
use_python('/Users/sylviatran/anaconda3/bin/python')
library(reticulate)
use_python('/Users/sylviatran/anaconda3/bin/python')
library(reticulate)
use_python('/Users/sylviatran/anaconda3/bin/python')
